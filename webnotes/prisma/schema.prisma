// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// AUTH MODELS (Unchanged)
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  name          String?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Add relations to Note and Folder
  notes         Note[]
  folders       Folder[]

  @@map("users")
}

model Account {
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}


// NEW: APPLICATION MODELS
model Folder {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())

  // Relation to User
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")

  // Relation to Notes
  notes     Note[]

  @@map("folders")
}

model Note {
  id        String   @id @default(cuid())
  title     String?
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to User
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")

  // Relation to Folder (optional)
  folder    Folder?  @relation(fields: [folderId], references: [id], onDelete: SetNull)
  folderId  String?  @map("folder_id")

  @@map("notes")
}