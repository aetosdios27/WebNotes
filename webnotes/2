'use client';

import { useState, useEffect, useMemo } from 'react';
import { ChevronsLeft, FolderPlus, FilePlus, Search } from 'lucide-react';
import { Collapsible, CollapsibleTrigger } from '@/app/components/ui/collapsible';
import { Button } from '@/components/ui/button';
import NoteList from './NoteList';
import AuthButton from './AuthButton';
import type { Note, Folder } from '@prisma/client';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';

interface SidebarProps {
  initialUnfiledNotes: Note[];
  initialFolders: Folder[];
  activeNoteId: string | null;
  setActiveNoteId: (id: string) => void;
  deleteNote: (id: string) => void;
  createNote: () => void; // FIX: No longer takes folderId
  createFolder: () => void;
  moveNote: (noteId: string, folderId: string | null) => void;
  refetchData: () => void;
}

export default function Sidebar({ 
  initialUnfiledNotes, 
  initialFolders,
  activeNoteId, 
  setActiveNoteId, 
  deleteNote, 
  createNote,
  createFolder,
  moveNote,
  refetchData
}: SidebarProps) {
  const [isOpen, setIsOpen] = useState(true);
  const [folders, setFolders] = useState<Folder[]>(initialFolders);
  const [unfiledNotes, setUnfiledNotes] = useState<Note[]>(initialUnfiledNotes);
  const [notesInFolders, setNotesInFolders] = useState<Map<string, Note[]>>(new Map());
  const [expandedFolders, setExpandedFolders] = useState<Set<string>>(new Set());

  useEffect(() => {
    // This effect ensures that if the parent data changes, the local state updates.
    setFolders(initialFolders);
    setUnfiledNotes(initialUnfiledNotes);
  }, [initialFolders, initialUnfiledNotes]);

  useEffect(() => {
    const saved = localStorage.getItem('expandedFolders');
    if (saved) {
      setExpandedFolders(new Set(JSON.parse(saved)));
    }
  }, []);

  useEffect(() => {
    localStorage.setItem('expandedFolders', JSON.stringify(Array.from(expandedFolders)));
  }, [expandedFolders]);


  const toggleFolder = async (folderId: string) => {
    const newSet = new Set(expandedFolders);
    if (newSet.has(folderId)) {
      newSet.delete(folderId);
    } else {
      newSet.add(folderId);
      // Fetch notes for this folder if they haven't been fetched yet
      if (!notesInFolders.has(folderId)) {
        const res = await fetch(`/api/notes?folderId=${folderId}`);
        if (res.ok) {
          const notes: Note[] = await res.json();
          setNotesInFolders(prev => new Map(prev).set(folderId, notes));
        }
      }
    }
    setExpandedFolders(newSet);
  };
  
  // Refetch data when a note is moved
  const handleNoteMoved = () => {
    refetchData(); // Call the parent's refetch function
  };

  return (
    <TooltipProvider delayDuration={0}>
      <Collapsible
        open={isOpen}
        onOpenChange={setIsOpen}
        className={`h-full flex flex-col bg-zinc-900 border-r border-zinc-800 transition-all duration-300 ease-in-out ${isOpen ? 'w-80' : 'w-[68px]'}`}
      >
        <div className={`p-4 flex items-center border-b border-zinc-800 flex-shrink-0 ${isOpen ? 'justify-between' : 'justify-center'}`}>
          {isOpen && <h1 className="text-xl font-bold text-zinc-200">WebNotes</h1>}
          <CollapsibleTrigger asChild>
            <Button variant="ghost" size="icon">
              <ChevronsLeft className={`h-5 w-5 transition-transform duration-300 ${isOpen ? '' : 'rotate-180'}`} />
            </Button>
          </CollapsibleTrigger>
        </div>

        <div className={`p-2 border-b border-zinc-800 flex items-center ${ isOpen ? 'flex-row justify-around' : 'flex-col justify-start gap-2' }`}>
          <Tooltip>
            <TooltipTrigger asChild>
              {/* FIX: The createNote call is now simple, no context needed */}
              <Button variant="ghost" size="icon" onClick={createNote}>
                <FilePlus size={18} />
              </Button>
            </TooltipTrigger>
            <TooltipContent side="right"><p>New Note</p></TooltipContent>
          </Tooltip>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button variant="ghost" size="icon" onClick={createFolder}>
                <FolderPlus size={18} />
              </Button>
            </TooltipTrigger>
            <TooltipContent side="right"><p>New Folder</p></TooltipContent>
          </Tooltip>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button variant="ghost" size="icon">
                <Search size={18} />
              </Button>
            </TooltipTrigger>
            <TooltipContent side="right"><p>Search</p></TooltipContent>
          </Tooltip>
        </div>

        {isOpen && (
          <div className="flex-1 overflow-y-auto">
            <NoteList 
              folders={folders}
              notesInFolders={notesInFolders}
              unfiledNotes={unfiledNotes}
              activeNoteId={activeNoteId} 
              setActiveNoteId={setActiveNoteId}
              deleteNote={deleteNote}
              expandedFolders={expandedFolders}
              toggleFolder={toggleFolder}
              // Pass the new moveNote handler to NoteList
              moveNote={async (noteId, folderId) => {
                await moveNote(noteId, folderId);
                handleNoteMoved();
              }}
            />
          </div>
        )}

        <div className="mt-auto p-2 border-t border-zinc-800">
          <AuthButton />
        </div>
      </Collapsible>
    </TooltipProvider>
  );
}